#!/usr/bin/env bash

### set color variable
GREEN='\033[3;32m'
RED='\033[1;31m'
YELLO='\033[1;33m'
END='\033[0m'

### errorarray function
function ea()
{
	if [ $? -ne 0 ];then
		array[${#array[*]}]="$1"
	fi
}

### determine if the folder exists
function folder()
{
	if [ -e $1 ];then
		echo -e "${RED} $1 has exists!"
		exit
	else
		mkdir $1
	fi
}

### get the verssion number
function version()
{
	### first variable is owner,second is repo
	num=`curl -s https://api.github.com/repos/$1/$2/releases/latest | grep tag_name | cut -f4 -d "\""`
	if [ ! "$num" ];then
		echo -e "${RED} The version number was not obtained! ${END}"
		array[${#array[*]}]="$2_version"
		return
	else
		echo $num 
	fi
}

### make new folders
function MakeFolders()
{
	folder /root/batch
	folder /root/subdomain
	folder /root/result
	folder /root/other
	folder /root/fuzz
	folder /root/fingerprint
	folder /root/port
	folder /root/sensitive
	folder /root/path
	cd /root/ && proxychains git clone https://github.com/Fridgffy/Dictfile > /dev/null 2>&1 
	ea 'Dictfile'

	sleep 2

}


### download batch tools
function BatchTools()
{
	echo -e "${GREEN}  download Dnsx ${END}"
	# ### get version
	go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest > /dev/null 2>&1 
	ea 'dnsx'
	sleep 2

	echo -e "${GREEN}  download Eeyes ${END}"
	### get version
	num_eeyes=`version EdgeSecurityTeam Eeyes`
	### download
	cd /root/batch && mkdir Eeyes && cd Eeyes && wget https://github.com/EdgeSecurityTeam/Eeyes/releases/download/${num_eeyes}/Eeyes-linux.zip > /dev/null 2>&1 && unzip *.zip  > /dev/null && rm *.zip && chmod 744 Eeyes-linux && ln -s /root/batch/Eeyes/Eeyes-linux /usr/bin/eeyes
	ea 'Eyes'
	sleep 2

}


function SubdomainTools()
{
	### esd
	echo -e "${GREEN}  download esd ${END}"
	pip install esd > /dev/null 2>&1
	ea 'esd'
	sleep 2

	### oneforall
	echo -e "${GREEN}  download OneForAll ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/shmilylty/OneForAll  > /dev/null 2>&1 && chmod 744 /root/subdomain/OneForAll/oneforall.py && ln -s /root/subdomain/OneForAll/oneforall.py /usr/bin/oneforall
	ea 'OneForAll'
	sleep 2

	pip install -r /root/subdomain/OneForAll/requirements.txt > /dev/null 2>&1
	ea 'PipOneforall'

	mv /root/subdomain/OneForAll/config/api.py /root/subdomain/OneForAll/config/api.py.bak
	mv /root/subdomain/OneForAll/config/setting.py /root/subdomain/OneForAll/config/setting.py.bak
	sleep 2

	### sublist3r
	echo -e "${GREEN}  download sublist3r ${END}"
	# apt -y  install sublist3r --upgrade > /dev/null 2>&1
	cd /root/subdomain && proxychains git clone https://github.com/aboul3la/Sublist3r  > /dev/null 2>&1 && cd Sublist3r && chmod 744 /root/subdomain/Sublist3r/sublist3r.py && ln -s /root/subdomain/Sublist3r/sublist3r.py /usr/bin/sublist3r 
	ea 'sublist3r'
	sleep 2

	pip install -r /root/subdomain/Sublist3r/requirements.txt > /dev/null 2>&1 && pip install unicode > /dev/null 2>&1
	ea 'Pipsublist3r'
	sleep 2

	### ctfr
	echo -e "${GREEN}  download ctfr ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/UnaPibaGeek/ctfr  > /dev/null 2>&1 && cd ctfr && chmod 744 /root/subdomain/ctfr/ctfr.py && ln -s /root/subdomain/ctfr/ctfr.py /usr/bin/ctfr 
	ea 'ctfr'
	sleep 2

	pip install -r /root/subdomain/ctfr/requirements.txt > /dev/null 2>&1
	ea 'Pipctfr'
	sleep 2

	### assetfinder
	echo -e "${GREEN}  download assetfinder ${END}"
	# apt -y  install assetfinder --upgrade > /dev/null 2>&1
	cd /root/subdomain && mkdir assetfinder && cd assetfinder && wget https://github.com/tomnomnom/assetfinder/releases/download/v0.1.1/assetfinder-linux-amd64-0.1.1.tgz  > /dev/null 2>&1 && tar -zxvf *.tgz > /dev/null 2>&1 && rm *.tgz && mv assetfinder /usr/bin 
	ea 'assetfinder'
	sleep 2

	### fierce
	echo -e "${GREEN}  download fierce ${END}"
	apt -y  install fierce --upgrade > /dev/null 2>&1
	ea 'fierce'
	sleep 2

	### subfinder
	echo -e "${GREEN}  download subfinder${END}"
	go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest > /dev/null 2>&1
	ea 'subfinder'
	sleep 2

	### knock
	echo -e "${GREEN}  download knock ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/guelfoweb/knock  > /dev/null 2>&1 && chmod 744 /root/subdomain/knock/knockpy.py && ln -s /root/subdomain/knock/knockpy.py /usr/bin/knock
	ea 'knock'
	sleep 2

	pip install -r /root/subdomain/knock/requirements.txt > /dev/null 2>&1
	ea 'Pipknock'
	sleep 2

	### subdomainBurte
	echo -e "${GREEN}  download subDomainsBrute ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/lijiejie/subDomainsBrute  > /dev/null 2>&1 && chmod 744 /root/subdomain/subDomainsBrute/subDomainsBrute.py 
	ea 'subDomainsBrute'

	pip install dnspython==2.2.1 async_timeout > /dev/null 2>&1
	ea 'pipdnspython'
	sleep 2
	

	### ksubdomain
	echo -e "${GREEN}  download ksubdomain ${END}"
	### get version
	num_ksu=`version knownsec ksubdomain`
	cd /root/subdomain && mkdir ksubdomain && cd ksubdomain && wget https://github.com/knownsec/ksubdomain/releases/download/${num_ksu}/ksubdomain_linux.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && mv ksubdomain /usr/bin 
	ea 'ksubdomain'
	sleep 2
	
	### aquatone
	echo -e "${GREEN}  download aquatone ${END}"
	gem > /dev/null 2>&1
	if [ $? -ne 0 ];then
		apt -y install ruby > /dev/null 2>&1
		ea 'ruby'
	fi
	gem install aquatone > /dev/null 2>&1
	mkdir /root/subdomain/aquatone
	ea 'aquatone'
	sleep 2

	### chaos
	echo -e "${GREEN}  download chaos ${END}"
	###get version
	go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest > /dev/null 2>&1
	ea 'chaos'
	sleep 2

	################################################## dns
	### ldns-walk
	echo -e "${GREEN}  download ldns-walk ${END}"
	apt -y  install ldnsutils --upgrade > /dev/null 2>&1
	ea 'ldns-walk'
	sleep 2

	### dnsrecon
	echo -e "${GREEN}  download dnsrecon ${END}"
	apt -y purge dnsrecon > /dev/null 2>&1
	mkdir /root/subdomain/dns && cd /root/subdomain/dns && proxychains git clone https://github.com/darkoperator/dnsrecon > /dev/null 2>&1 && ln -s /root/subdomain/dns/dnsrecon/dnsrecon.py /usr/bin/dnsrecon
	ea 'dnsrecon'
	sleep 2

	### dnsenum
	echo -e "${GREEN}  download dnsenum ${END}"
	apt -y install dnsenum > /dev/null 2>&1 
	ea 'dnsenum'
	sleep 2


	################################################## permutations

	################################################## altdns
	### altdns
	echo -e "${GREEN}  download altdns ${END}"
	apt -y  install --upgrade altdns > /dev/null 2>&1
	ea 'altdns'
	sleep 2

	### Brute force
}

function otherTools()
{
	### Virtual-host
	### virtual-host-discovery
	echo -e "${GREEN}  download virtual-host-discovery ${END}"
	cd /root/other && proxychains git clone https://github.com/jobertabma/virtual-host-discovery > /dev/null 2>&1
	ea 'virtual-host-discovery'
	sleep 2

	### asnmap
	echo -e "${GREEN}  download Asnmap ${END}"
	go install github.com/projectdiscovery/asnmap/cmd/asnmap@latest > /dev/null 2>&1
	ea 'asnmap'
	sleep 2

	### mapcidr
	echo -e "${GREEN}  download mapcidr ${END}"
	go install -v github.com/projectdiscovery/mapcidr/cmd/mapcidr@latest > /dev/null 2>&1
	ea 'mapcidr'
	sleep 2

	### tlsx
	echo -e "${GREEN}  download tlsx ${END}"
	go install github.com/projectdiscovery/tlsx/cmd/tlsx@latest > /dev/null 2>&1
	ea 'tlsx'
	sleep 2
	### bypass-403

	### tld_scanner
	echo -e "${GREEN}  download tld_scanner ${END}"
	cd /root/other && proxychains git clone https://github.com/ozzi-/tld_scanner > /dev/null 2>&1
	ea 'tld_scanner'
	python38 -m pip install -r /root/other/tld_scanner/requirements.txt > /dev/null 2>&1
	ea 'piptld_scanner'
	sleep 2

}


function fuzz()
{
	### gobuster
	go install github.com/OJ/gobuster/v3@latest  > /dev/null 2>&1
	ea 'gobuster'
	sleep 2

	### ffuf
	cd /root/fuzz && proxychains git clone https://github.com/ffuf/ffuf > /dev/null 2>&1 && go get > /dev/null 2>&1 && go build > /dev/null 2>&1 && mv /root/fuzz/ffuf/ffuf /usr/bin
	ea 'ffuf'
	sleep 2
}

function fingerprintTools()
{
	### Finger
	echo -e "${GREEN}  download Finger ${END}"
	cd /root/fingerprint && proxychains git clone https://github.com/EASY233/Finger > /dev/null 2>&1
	ea 'Finger'

	pip install -r /root/fingerprint/Finger/requirements.txt > /dev/null 2>&1
	ea 'pipFinger'
	sleep 2

	### whatweb
	echo -e "${GREEN}  download whatweb ${END}"
	apt -y install whatweb --upgrade > /dev/null 2>&1
	ea 'whatweb'
	sleep 2

	### EHole
	echo -e "${GREEN}  download EHole ${END}"
	### get version
	num_ehole=`version EdgeSecurityTeam EHole`
	mkdir /root/fingerprint/EHole && cd /root/fingerprint/EHole && wget https://github.com/EdgeSecurityTeam/EHole/releases/download/${num_ehole}/EHole_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip __MACOSX -r && mv /root/fingerprint/EHole/EHole_linux_amd64/EHole_linux_amd64 /root/fingerprint/EHole/EHole && mv /root/fingerprint/EHole/EHole_linux_amd64/* /root/fingerprint/EHole/ && rm EHole_linux_amd64 -r && chmod 744 /root/fingerprint/EHole/EHole && ln -s /root/fingerprint/EHole/EHole /usr/bin/EHole
	ea 'EHole'
	sleep 2

	### Glass
	echo -e "${GREEN}  download Glass ${END}"
	cd /root/fingerprint && proxychains git clone https://github.com/s7ckTeam/Glass > /dev/null 2>&1
	ea 'Glass'

	pip install -r /root/fingerprint/Glass/requirements.txt > /dev/null 2>&1
	ea 'pipGlass'
	sleep 2

	### cmseek
	echo -e "${GREEN}  download cmseek ${END}"
	apt -y install cmseek --upgrade > /dev/null 2>&1
	sleep 2

	### dismap
	echo -e "${GREEN}  download dismap ${END}"
	### get version
	num_dismap=`version zhzyker dismap`
	num_dismap_v=`echo $num_dismap |cut -f2 -d "v"`
	mkdir /root/fingerprint/dismap && cd /root/fingerprint/dismap && wget https://github.com/zhzyker/dismap/releases/download/${num_dismap}/dismap-${num_dismap_v}-linux-amd64 > /dev/null 2>&1 && mv /root/fingerprint/dismap/dismap-0.4-linux-amd64 /root/fingerprint/dismap/dismap && chmod 744 /root/fingerprint/dismap/dismap
	ea 'dismap'
	sleep 2

	### observer_ward
	echo -e "${GREEN}  download observer_ward ${END}"
	### get version
	num_observer=`version emo-crab observer_ward`
	mkdir /root/fingerprint/observer_ward && cd /root/fingerprint/observer_ward && wget https://github.com/emo-crab/observer_ward/releases/download/${num_observer}/observer_ward_${num_observer}_x86_64-unknown-linux-musl.tar.gz > /dev/null 2>&1 && tar -zxvf *.tar.gz > /dev/null 2>&1 && rm LICENSE README.md *.tar.gz 
	ea 'observer_ward'
	sleep 2

}

function portTools()
{
	### scaninfo
	echo -e "${GREEN}  download scaninfo ${END}"
	### get version
	num_scaninfo=`version redtoolskobe scaninfo`
	mkdir /root/port/scaninfo && cd /root/port/scaninfo && wget https://github.com/redtoolskobe/scaninfo/releases/download/${num_scaninfo}/scaninfo_linux_x64  > /dev/null 2>&1 && mv scaninfo_linux_x64 scaninfo && chmod 744 scaninfo
	ea 'scaninfo'
	sleep 2

	### naabu
	echo -e "${GREEN}  download naabu ${END}"
	go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest > /dev/null 2>&1
	ea 'naabu'
	sleep 2

	### rustscan
	echo -e "${GREEN}  download rustscan ${END}"
	### getversion
	num_rustscan=`version bee-san RustScan`
	mkdir /root/port/rustscan && cd /root/port/rustscan && wget https://github.com/bee-san/RustScan/releases/download/${num_rustscan}/x86_64-linux-rustscan.tar.gz.zip > /dev/null 2>&1 && unzip x86_64-linux-rustscan.tar.gz.zip > /dev/null 2>&1 && tar -zxvf x86_64-linux-rustscan.tar.gz > /dev/null 2>&1 && rm *.zip *.tar.gz 
	ea 'rustscan'
	sleep 2

}

function PathTools()
{
	### dirsearch
	echo -e "${GREEN}  download dirsearch ${END}"
	cd /root/path && proxychains git clone https://github.com/maurosoria/dirsearch > /dev/null 2>&1
	ea 'dirsearch'

	pip install -r /root/path/dirsearch/requirements.txt > /dev/null 2>&1 
	ea 'pipdirsearch'
	sleep 2

	### FileSensor
	echo -e "${GREEN}  download FileSensor ${END}"
	cd /root/path && proxychains git clone https://github.com/Xyntax/FileSensor > /dev/null 2>&1  
	ea 'FileSensor'

	pip install -r /root/path/FileSensor/requirements.txt > /dev/null 2>&1
	ea 'pipFileSensor'
	sleep 2

	### cansina
	echo -e "${GREEN}  download cansina ${END}"
	pip install cansina > /dev/null 2>&1
	ea 'cansina'
	sleep 2

	### dirmap
	echo -e "${GREEN}  download dirmap ${END}"
	cd /root/path && proxychains git clone https://github.com/H4ckForJob/dirmap > /dev/null 2>&1
	ea 'dirmap'

	python38 -m pip install -r /root/path/dirmap/requirement.txt > /dev/null 2>&1
	ea 'pipdirmap'
	sleep 2

	### dirb
	echo -e "${GREEN}  download dirmap ${END}"
	cd /root/path && apt install dirb > /dev/null 2>&1
	ea 'dirb'
	sleep 2

	###ihoneyBakFileScan
	echo -e "${GREEN}  download ihoneyBakFileScan ${END}"
	cd /root/path && proxychains git clone https://github.com/sry309/ihoneyBakFileScan  > /dev/null 2>&1
	ea 'ihoneyBakFileScan'
	sleep 2

	### afuzz
	echo -e "${GREEN}  download afuzz ${END}"
	pip install afuzz > /dev/null 2>&1
	ea 'afuzz'
	sleep 2

	### waybackurls
	echo -e "${GREEN}  download waybackurls ${END}"
	go install github.com/tomnomnom/waybackurls@latest
	ea 'waybackurls'
	sleep 2

	### ParamSpider
	echo -e "${GREEN}  download ParamSpider ${END}"
	cd /root/path && proxychains git clone https://github.com/devanshbatham/ParamSpider  > /dev/null 2>&1 && cd /root/path/ParamSpider/ &&python setup.py install > /dev/null 2>&1
	ea 'ParamSpider'
	sleep 2

}

function SensitiveTools()
{
	### Linkfinder
	echo -e "${GREEN}  download Linkfinder ${END}"
	cd /root/sensitive && proxychains git clone https://github.com/GerbenJavado/LinkFinder > /dev/null 2>&1 
	ea 'Linkfinder'

	pip install -r /root/sensitive/LinkFinder/requirements.txt > /dev/null 2>&1
	ea 'pipLinkfinder'
	sleep 2

	### jsfinder
	echo -e "${GREEN}  download jsfinder ${END}"
	cd /root/sensitive && proxychains git clone https://github.com/Threezh1/JSFinder > /dev/null 2>&1
	ea 'jsfinder'
	sleep 2

	### URLFinder
	echo -e "${GREEN}  download URLFinder ${END}"
	### getversion
	num_urlfinder=`version pingc0y URLFinder`
	cd /root/sensitive && mkdir /root/sensitive/URLFinder && wget https://github.com/pingc0y/URLFinder/releases/download/${num_urlfinder}/URLFinder_Linux_x86_64.tar.gz > /dev/null 2>&1 && tar -zxvf *.tar.gz > /dev/null 2>&1 && rm rm LICENSE README.md && rm *.gz
	ea 'URLFinder'
	sleep 2

	### JSINFO-SCAN
	echo -e "${GREEN}  download JSINFO-SCAN ${END}"
	cd /root/sensitive && proxychains git clone https://github.com/p1g3/JSINFO-SCAN > /dev/null 2>&1  
	ea 'JSINFO-SCAN'
	
	pip install -r /root/sensitive/JSINFO-SCAN/requirements.txt > /dev/null 2>&1 
	ea 'pipJSINFO-SCAN'
	sleep 2

	### JSFScan.sh 
	echo -e "${GREEN}  download JSFScan.sh ${END}"
	cd /root/sensitive && proxychains git clone https://github.com/KathanP19/JSFScan.sh  > /dev/null 2>&1 && chmod 744 /root/sensitive/JSFScan.sh/JSFScan.sh
	ea 'JSFScan.sh'
	sleep 2

}

function CycleArray()
{
	for i in ${array[*]}
	do
		echo $i
	done
}

### main 
echo -e "${RED}START${END}"
MakeFolders


echo -e "${YELLO} start download BatchTools tools${END}"
BatchTools

echo -e "${YELLO} start download Subdomain tools${END}"
SubdomainTools

echo -e "${YELLO} start otherTools${END}"
otherTools


echo -e "${YELLO} start url fingerprintTools ${END}"
fingerprintTools

echo -e "${YELLO} start url PathTools ${END}"
PathTools

### error
echo -e "${RED}Error ${END}"
CycleArray


### configuration vps
echo -e "${RED}Configuration Tools https://github.com/Fridgffy/Configfile ${END}"
echo -e "${GREEN}  w13scan${END}"
echo -e "${GREEN}  BBScan${END}"
echo -e "${GREEN}  vulmap${END}"
echo -e "${GREEN}  amass${END}"
echo -e "${GREEN}  shuize${END}"
echo -e "${GREEN}  reconftw${END}"
echo -e "${GREEN}  spiderfoot${END}"

### configuration subdomain
echo -e "${RED}Configuration subdomain tools${END}"

echo -e "${GREEN}  OneForAll${END}"
echo -e "${GREEN}  subfinder${END}"
echo -e "${GREEN}  findomain${END}"
echo -e "${GREEN}  aquatone${END}"


### change file
echo -e "${RED}Change file${END}"
echo -e "${GREEN}  Sublist3r${END}"
echo -e "${GREEN}  oneforall.py${END}"
echo -e "${GREEN}  knockpy.py${END}"
echo -e "${GREEN}  gospider${END}"

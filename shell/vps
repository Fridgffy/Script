#!/usr/bin/env bash

### set color variable
GREEN='\033[3;32m'
RED='\033[1;31m'
YELLO='\033[1;33m'
END='\033[0m'

### errorarray function
function ea()
{
	if [ $? -ne 0 ];then
		array[${#array[*]}]="$1"
	fi
}

### determine if the folder exists
function folder()
{
	if [ -e $1 ];then
		echo -e "${RED} $1 has exists!"
		exit
	else
		mkdir $1
	fi
}

### get the verssion number
function version()
{
	### first variable is owner,second is repo
	num=`curl -s https://api.github.com/repos/$1/$2/releases/latest | grep tag_name | cut -f4 -d "\""`
	if [ ! "$num" ];then
		echo -e "${RED} The version number was not obtained! ${END}"
		array[${#array[*]}]="$2_version"
		return
	else
		echo $num 
	fi
}

### make new folders
function MakeFolders()
{
	folder /root/ARL
	folder /root/batch
	folder /root/fscan
	folder /root/kscan
	folder /root/amass
	folder /root/vuln
	folder /root/subdomain
	cd /root/ && git clone https://github.com/Fridgffy/Dictfile > /dev/null 2>&1 
	sleep 2

}


### download arl
function ARL()
{	
	### get version
	num_arl=`version ki9mu ARL-plus-docker`
	num_arl_v=`echo $num_arl | cut -f2 -d "v"`

	### download
	mkdir /root/ARL && cd /root/ARL && wget https://github.com/ki9mu/ARL-plus-docker/archive/refs/tags/${num_arl}.tar.gz > /dev/null 2>&1 && tar -zxvf *.tar.gz > /dev/null 2>&1 && rm *.tar.gz && cd ARL-plus-docker-${num_arl_v} && mv * ../ && cd ../ && rm ARL-plus-docker-${num_arl_v} -r
	ea 'arl'
	sleep 2

	### config_tool
	cd /root/ARL && git clone https://github.com/loecho-sec/ARL-Finger-ADD > /dev/null 2>&1
	ea 'arl_finger_tool'
	sleep 2

	### block config
	cd /root/ARL && mv config-docker.yaml config-docker.yaml.bak
	ea 'arl_block_config'

	cd /root/ARL/ARL-Finger-ADD && mv finger.json finger.json.bak
	ea 'arl_block_finger'

	sleep 2
}

### download batch tools
function BatchTools()
{
	echo -e "${GREEN}  download Dnsx ${END}"

	### get version
	num_dnsx=`version projectdiscovery dnsx`
	num_dnsx_v=`echo $num_dnsx | cut -f2 -d "v"`

	### download
	cd /root/batch && mkdir dnsx && cd dnsx && wget https://github.com/projectdiscovery/dnsx/releases/download/${num_dnsx}/dnsx_${num_dnsx_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip  > /dev/null && rm *.zip && mv dnsx /usr/bin
	ea 'dnsx'
	sleep 2

	echo -e "${GREEN}  download Eeyes ${END}"

	### get version
	num_eeyes=`version EdgeSecurityTeam Eeyes`

	### download
	cd /root/batch && mkdir Eeyes && cd Eeyes && wget https://github.com/EdgeSecurityTeam/Eeyes/releases/download/${num_eeyes}/Eeyes-linux.zip > /dev/null 2>&1 && unzip *.zip  > /dev/null && rm *.zip && chmod 744 Eeyes-linux && ln -s /root/batch/Eeyes/Eeyes-linux /usr/bin/eeyes
	ea 'Eyes'
	sleep 2

}

### download vulnerability scanning tools
function vuln()
{	
	### bbscan
	echo -e "${GREEN}  download BBscan ${END}"
	cd /root/vuln && git clone https://github.com/lijiejie/BBScan > /dev/null 2>&1
	ea 'bbscan'
	sleep 2

	cd /root/vuln/BBScan && pip install -r requirements.txt > /dev/null 2>&1
	ea 'pipbbscan'
	sleep 2

	### fscan
	echo -e "${GREEN}  download fscan ${END}"
	#### fscan version
	num_fscan=`version shadow1ng fscan`

	cd /root/fscan && wget https://github.com/shadow1ng/fscan/releases/download/${num_fscan}/fscan > /dev/null 2>&1 && chmod 744 fscan
	ea 'fscan'
	sleep 2

	### w13scan
	echo -e "${GREEN}  download w13scan ${END}"
	cd /root/vuln && git clone https://github.com/w-digital-scanner/w13scan > /dev/null 2>&1 
	ea 'w13scan'

	cd /root/vuln/w13scan && pip install -r requirements.txt > /dev/null 2>&1
	ea 'pipw13scan'

	### vulnmap
	echo -e "${GREEN}  download vulnmap ${END}"
	cd /root/vuln && git clone https://github.com/zhzyker/vulmap > /dev/null 2>&1 
	ea 'vulnmap'

	cd /root/vuln/vulmap &&  pip install -r requirements.txt > /dev/null 2>&1
	ea 'pipvulnmap'
}

function comprehensive()
{	
	### amass
	echo -e "${GREEN}  download amass ${END}"
	apt install amass --upgrade > /dev/null 2>&1 
	ea 'amass'
	sleep 2

	### Dmitry
	echo -e "${GREEN}  download Dmitry ${END}"
	apt install dmitry --upgrade > /dev/null 2>&1 
	ea 'Dmitry'
	sleep 2

	### shuize
	echo -e "${GREEN}  download ShuiZe ${END}"
	cd /root && git clone https://github.com/0x727/ShuiZe_0x727 > /dev/null 2>&1 && mv ShuiZe_0x727 shuize
	ea 'shuize'
	sleep 2

	cd /root/shuize && pip install -r requirements.txt > /dev/null 2>&1 && pip install -r requirements2.txt > /dev/null 2>&1 
	ea 'pipshuize'
	sleep 2

	### block config
	cd /root/shuize/iniFile && mv config.ini config.ini.bak
	ea 'shuize_block_config'
	sleep 2

	### kscan
	echo -e "${GREEN}  download kscan ${END}"
	#### version
	num_kscan=`version lcvvvv kscan`
	cd /root/kscan && wget https://github.com/lcvvvv/kscan/releases/download/${num_kscan}/kscan_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip > /dev/null 2>&1 && mv kscan_linux_amd64 kscan
	ea 'kscan'
	sleep 2

	### reconftw
	echo -e "${GREEN}  download reconftw ${END}"
	cd /root/ && git clone https://github.com/six2dez/reconftw > /dev/null 2>&1
	ea 'reconftw'
	sleep 2

	cd /root/reconftw && pip install -r requirements.txt > /dev/null 2>&1
	ea 'pipreconfitw'
	sleep 2

	### spiderfoot
	echo -e "${GREEN}  download spiderfoot ${END}"
	cd /root && git clone https://github.com/smicallef/spiderfoot > /dev/null 2>&1
	ea 'spiderfoot'
	sleep 2

	cd /root/spiderfoot && pip install -r requirements.txt > /dev/null 2>&1
	ea 'pipspiderfoot'
	sleep 2
}

function SubdomainTools()
{
	### esd
	echo -e "${GREEN}  download esd ${END}"
	pip install esd > /dev/null 2>&1
	ea 'esd'
	sleep 2

	### oneforall
	echo -e "${GREEN}  download OneForAll ${END}"
	cd /root/subdomain && git clone https://github.com/shmilylty/OneForAll  > /dev/null 2>&1 && chmod 744 /root/subdomain/OneForAll/oneforall.py && ln -s /root/subdomain/OneForAll/oneforall.py /usr/bin/oneforall
	ea 'OneForAll'
	sleep 2

	pip install -r /root/subdomain/OneForAll/requirements.txt > /dev/null 2>&1
	ea 'PipOneforall'
	sleep 2

	### dnsub
	echo -e "${GREEN}  download dnsub ${END}"
	### get version
	num_dnsub=`version yunxu1 dnsub`

	cd /root/subdomain && mkdir dnsub && cd dnsub && wget https://github.com/yunxu1/dnsub/releases/download/${num_dnsub}/dnsub_linux_amd64_${num_dnsub}.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip 
	ea 'dnsub'
	sleep 2

	### sublist3r
	echo -e "${GREEN}  download sublist3r ${END}"
	# apt install sublist3r --upgrade > /dev/null 2>&1
	cd /root/subdomain && git clone https://github.com/aboul3la/Sublist3r  > /dev/null 2>&1 && cd Sublist3r && chmod 744 /root/subdomain/Sublist3r/sublist3r.py && ln -s /root/subdomain/Sublist3r/sublist3r.py /usr/bin/sublist3r 
	ea 'sublist3r'
	sleep 2

	pip install -r /root/subdomain/Sublist3r/requirements.txt > /dev/null 2>&1 && pip install unicode
	ea 'Pipsublist3r'
	sleep 2

	### ctfr
	echo -e "${GREEN}  download ctfr ${END}"
	cd /root/subdomain && git clone https://github.com/UnaPibaGeek/ctfr  > /dev/null 2>&1 && cd ctfr && chmod 744 /root/subdomain/ctfr/ctfr.py && ln -s /root/subdomain/ctfr/ctfr.py /usr/bin/ctfr 
	ea 'ctfr'
	sleep 2

	pip install -r /root/subdomain/ctfr/requirements.txt > /dev/null 2>&1
	ea 'Pipctfr'
	sleep 2

	### assetfinder
	echo -e "${GREEN}  download assetfinder ${END}"
	# apt install assetfinder --upgrade > /dev/null 2>&1
	cd /root/subdomain && mkdir assetfinder && cd assetfinder && wget https://github.com/tomnomnom/assetfinder/releases/download/v0.1.1/assetfinder-linux-amd64-0.1.1.tgz  > /dev/null 2>&1 && tar -zxvf *.tgz > /dev/null 2>&1 && rm *.tgz && mv assetfinder /usr/bin 
	ea 'assetfinder'
	sleep 2

	### fierce
	echo -e "${GREEN}  download fierce ${END}"
	apt install fierce --upgrade > /dev/null 2>&1
	ea 'fierce'
	sleep 2

	### subfinder
	echo -e "${GREEN}  download subfinder${END}"
	# apt install subfinder --upgrade > /dev/null 2>&1
	### get version	
	num_subfinder=`version projectdiscovery subfinder`
	num_subfinder_v=`echo $num_subfinder | cut -f2 -d "v"`

	cd /root/subdomain && mkdir subfinder && cd subfinder && wget https://github.com/projectdiscovery/subfinder/releases/download/${num_subfinder}/subfinder_${num_subfinder_v}_linux_amd64.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && mv subfinder /usr/bin 
	ea 'subfinder'
	sleep 2

	### knock
	echo -e "${GREEN}  download knock ${END}"
	cd /root/subdomain && git clone https://github.com/guelfoweb/knock  > /dev/null 2>&1 && chmod 744 /root/subdomain/knock/knockpy.py && ln -s /root/subdomain/knock/knockpy.py /usr/bin/knock
	ea 'knock'
	sleep 2

	pip install -r /root/subdomain/knock/requirements.txt > /dev/null 2>&1
	ea 'Pipknock'
	sleep 2

	### findomain
	echo -e "${GREEN}  download findomain ${END}"
	### get version
	num_fin=`version Findomain Findomain`

	cd /root/subdomain && mkdir findomain && cd findomain && wget https://github.com/Findomain/Findomain/releases/download/${num_fin}/findomain-linux.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && chmod 744 findomain && mv findomain /usr/bin
	ea 'findomain'
	sleep 2

	### subdomainBurte
	echo -e "${GREEN}  download subDomainsBrute ${END}"
	cd /root/subdomain && git clone https://github.com/lijiejie/subDomainsBrute  > /dev/null 2>&1 && chmod 744 /root/subdomain/subDomainsBrute/subDomainsBrute.py && ln -s /root/subdomain/subDomainsBrute/subDomainsBrute.py /usr/bin/subdomainbrute && pip install dnspython==2.2.1 async_timeout > /dev/null 2>&1
	ea 'subDomainsBrute'
	sleep 2
	
	### dnsmap
	echo -e "${GREEN}  download dnsmap ${END}"
	apt install dnsmap --upgrade > /dev/null 2>&1
	ea 'dnsmap'
	sleep 2

	### ksubdomain
	echo -e "${GREEN}  download ksubdomain ${END}"
	### get version
	num_ksu=`version knownsec ksubdomain`

	cd /root/subdomain && mkdir ksubdomain && cd ksubdomain && wget https://github.com/knownsec/ksubdomain/releases/download/${num_ksu}/ksubdomain_linux.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && mv ksubdomain /usr/bin 
	ea 'ksubdomain'
	sleep 2
	
	################################################## dns
	### ldns-walk
	echo -e "${GREEN}  download ldns-walk ${END}"
	apt install ldnsutils --upgrade > /dev/null 2>&1
	ea 'ldns-walk'
	sleep 2

	################################################## permutations

	################################################## altdns
	echo -e "${GREEN}  download altdns ${END}"
	apt install py-altdns --upgrade > /dev/null 2>&1
	ea 'altdns'
	sleep 2

	### Brute force
}

function CycleArray()
{
	for i in ${array[*]}
	do
		echo $i
	done
}

### main 
echo -e "${YELLO}START${END}"
MakeFolders

echo -e "${YELLO} start download ARL${END}"
ARL

echo -e "${YELLO} start download vuln tools${END}"
vuln

echo -e "${YELLO} start download comprehensive tools${END}"
comprehensive

echo -e "${YELLO} start download Subdomain tools${END}"
SubdomainTools

### error
echo -e "${RED}Error ${END}"
CycleArray


### install
echo -e "${RED}manual install${END}"
echo -e "${GREEN}  reconftw${END}"
echo -e "${GREEN}  spiderfoot${END}"

### configuration
echo -e "${RED}Configuration Tools https://github.com/Fridgffy/Configfile ${END}"
echo -e "${GREEN}  ARL${END}"
echo -e "${GREEN}  w13scan${END}"
echo -e "${GREEN}  vulmap${END}"
echo -e "${GREEN}  amass${END}"
echo -e "${GREEN}  shuize${END}"
echo -e "${GREEN}  kscan${END}"
echo -e "${GREEN}  reconftw${END}"
echo -e "${GREEN}  spiderfoot${END}"

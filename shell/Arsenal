#!/usr/bin/env bash

### set color variable
GREEN='\033[3;32m'
RED='\033[1;31m'
YELLO='\033[1;33m'
END='\033[0m'

### ErrorArray funtion
function ea()
{
	if [ $? -ne 0 ];then
		array[${#array[*]}]="$1"
	fi
}

### determine if the folder exists
function folder()
{
	if [ -e $1 ];then
		echo -e "${RED} $1 has exists!"
		exit
	else
		mkdir $1
	fi
}

### get the version number
function version()
{	
	### first variable is owner,second is repo

	num=`curl -s https://api.github.com/repos/$1/$2/releases/latest | grep tag_name | cut -f4 -d "\""`
	if [ ! "$num" ];then
		echo -e "${RED} The version number was not obtained! ${END}"
		array[${#array[*]}]="$2_version"
		return
	else
		echo $num 
	fi
}

### set current shell proxy
function setproxy()
{
	### determine whether clash is enabled
	if [ `ps -ef | grep clash |grep -v grep | wc -l` -eq 0 ];then
		echo -e "${RED} clash is not enabled ${END}!"
		exit
	else
		echo -e "${GREEN} clash is enabled"
	fi

	### detarmine whether proxychains is set
	if [ `cat /etc/proxychains4.conf| grep 7891 |wc -l` -eq 0 ];then
		echo -e "${RED} proxychains is not set ${END}!"
		exit
	else
		echo -e "${GREEN} proxychains is set ${END}"
	fi

	### apt -y  updatte
	apt -y  update  > /dev/null 2>&1
	sleep 2
}

### create new folder
function MakeNewFolder()
{	
	folder /root/batch
	folder /root/app
	folder /root/subdomain
	folder /root/other
	folder /root/fingerprint
	folder /root/result
	cd /root/ && proxychains git clone https://github.com/Fridgffy/Dictfile > /dev/null 2>&1 
	ea 'Dictfile'

	python -m pip install pip --upgrade > /dev/null 2>&1 
	ea 'pipupdate'

	sleep 2
}

### download batch tools
function BatchTools()
{
	echo -e "${GREEN}  download Dnsx ${END}"

	### get version
	num_dnsx=`version projectdiscovery dnsx`
	num_dnsx_v=`echo $num_dnsx | cut -f2 -d "v"`

	### download
	cd /root/batch && mkdir dnsx && cd dnsx && proxychains wget https://github.com/projectdiscovery/dnsx/releases/download/${num_dnsx}/dnsx_${num_dnsx_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip  > /dev/null && rm *.zip && mv dnsx /usr/bin
	ea 'dnsx'
	sleep 2

	echo -e "${GREEN}  download Eeyes ${END}"

	### get version
	num_eeyes=`version EdgeSecurityTeam Eeyes`

	### download
	cd /root/batch && mkdir Eeyes && cd Eeyes && proxychains wget https://github.com/EdgeSecurityTeam/Eeyes/releases/download/${num_eeyes}/Eeyes-linux.zip > /dev/null 2>&1 && unzip *.zip  > /dev/null && rm *.zip && chmod 744 Eeyes-linux && ln -s /root/batch/Eeyes/Eeyes-linux /usr/bin/eeyes
	ea 'Eyes'
	sleep 2
}

### download company tools
function CompanyTools()
{
	echo -e "${GREEN}  download ENScan_GO ${END}"

	### get version
	num_ens=`version wgpsec ENScan_GO`

	### download
	cd /root/company && mkdir enscan && cd enscan && proxychains wget https://github.com/wgpsec/ENScan_GO/releases/download/${num_ens}/enscan-${num_ens}-linux-amd64.tar.gz  > /dev/null 2>&1 && tar -zxvf *.tar.gz  > /dev/null 2>&1 && rm *.tar.gz && mv enscan* enscan
	ea 'ENScan'
	sleep 2
}

### download company tools 
function AppTools()
{
	### AppInfoScanner
	echo -e "${GREEN}  download AppInfoScanner ${END}"

	cd /root/app && proxychains git clone https://github.com/kelvinBen/AppInfoScanner  > /dev/null 2>&1
	ea 'AppInfoScanner'
	
	pip install -r /root/app/AppInfoScanner/requirements.txt > /dev/null 2>&1
	ea 'PipAppInfoScanner'
	sleep 2
	
	### apkleaks
	echo -e "${GREEN}  download apkleaks${END}"

	pip install apkleaks > /dev/null 2>&1
	ea 'apkleaks'
	sleep 2

	### AppMessenger
	echo -e "${YELLO} Download Windows software AppMessenger in https://github.com/sulab999/AppMessenger/releases/download/v4.6.3/appmsg4.6.3.zip ${END}"

	pip install async_timeout > /dev/null 2>&1
	ea 'Pipasync_timeout'
	sleep 2
}

function SubdomainTools()
{
	### esd
	echo -e "${GREEN}  download esd ${END}"
	pip install esd > /dev/null 2>&1
	ea 'esd'
	sleep 2

	### oneforall
	echo -e "${GREEN}  download OneForAll ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/shmilylty/OneForAll  > /dev/null 2>&1 && chmod 744 /root/subdomain/OneForAll/oneforall.py && ln -s /root/subdomain/OneForAll/oneforall.py /usr/bin/oneforall
	ea 'OneForAll'
	sleep 2

	pip install -r /root/subdomain/OneForAll/requirements.txt > /dev/null 2>&1
	ea 'PipOneforall'

	mv /root/subdomain/OneForAll/config/api.py /root/subdomain/OneForAll/config/api.py.bak
	sleep 2

	### dnsub
	echo -e "${GREEN}  download dnsub ${END}"
	### get version
	num_dnsub=`version yunxu1 dnsub`

	cd /root/subdomain && mkdir dnsub && cd dnsub && proxychains wget https://github.com/yunxu1/dnsub/releases/download/${num_dnsub}/dnsub_linux_amd64_${num_dnsub}.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip 
	ea 'dnsub'
	sleep 2

	### sublist3r
	echo -e "${GREEN}  download sublist3r ${END}"
	# apt -y  install sublist3r --upgrade > /dev/null 2>&1
	cd /root/subdomain && proxychains git clone https://github.com/aboul3la/Sublist3r  > /dev/null 2>&1 && cd Sublist3r && chmod 744 /root/subdomain/Sublist3r/sublist3r.py && ln -s /root/subdomain/Sublist3r/sublist3r.py /usr/bin/sublist3r 
	ea 'sublist3r'
	sleep 2

	pip install -r /root/subdomain/Sublist3r/requirements.txt > /dev/null 2>&1 && pip install unicode > /dev/null 2>&1
	ea 'Pipsublist3r'
	sleep 2

	### ctfr
	echo -e "${GREEN}  download ctfr ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/UnaPibaGeek/ctfr  > /dev/null 2>&1 && cd ctfr && chmod 744 /root/subdomain/ctfr/ctfr.py && ln -s /root/subdomain/ctfr/ctfr.py /usr/bin/ctfr 
	ea 'ctfr'
	sleep 2

	pip install -r /root/subdomain/ctfr/requirements.txt > /dev/null 2>&1
	ea 'Pipctfr'
	sleep 2

	### assetfinder
	echo -e "${GREEN}  download assetfinder ${END}"
	# apt -y  install assetfinder --upgrade > /dev/null 2>&1
	cd /root/subdomain && mkdir assetfinder && cd assetfinder && proxychains wget https://github.com/tomnomnom/assetfinder/releases/download/v0.1.1/assetfinder-linux-amd64-0.1.1.tgz  > /dev/null 2>&1 && tar -zxvf *.tgz > /dev/null 2>&1 && rm *.tgz && mv assetfinder /usr/bin 
	ea 'assetfinder'
	sleep 2

	### fierce
	echo -e "${GREEN}  download fierce ${END}"
	apt -y  install fierce --upgrade > /dev/null 2>&1
	ea 'fierce'
	sleep 2

	### subfinder
	echo -e "${GREEN}  download subfinder${END}"
	# apt -y  install subfinder --upgrade > /dev/null 2>&1
	### get version	
	num_subfinder=`version projectdiscovery subfinder`
	num_subfinder_v=`echo $num_subfinder | cut -f2 -d "v"`

	cd /root/subdomain && mkdir subfinder && cd subfinder && proxychains wget https://github.com/projectdiscovery/subfinder/releases/download/${num_subfinder}/subfinder_${num_subfinder_v}_linux_amd64.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && mv subfinder /usr/bin 
	ea 'subfinder'
	sleep 2

	### knock
	echo -e "${GREEN}  download knock ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/guelfoweb/knock  > /dev/null 2>&1 && chmod 744 /root/subdomain/knock/knockpy.py && ln -s /root/subdomain/knock/knockpy.py /usr/bin/knock
	ea 'knock'
	sleep 2

	pip install -r /root/subdomain/knock/requirements.txt > /dev/null 2>&1
	ea 'Pipknock'
	sleep 2

	### findomain
	echo -e "${GREEN}  download findomain ${END}"
	### get version
	num_fin=`version Findomain Findomain`

	cd /root/subdomain && mkdir findomain && cd findomain && proxychains wget https://github.com/Findomain/Findomain/releases/download/${num_fin}/findomain-linux.zip  > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && chmod 744 findomain && mv findomain /usr/bin
	ea 'findomain'
	sleep 2

	### subdomainBurte
	echo -e "${GREEN}  download subDomainsBrute ${END}"
	cd /root/subdomain && proxychains git clone https://github.com/lijiejie/subDomainsBrute  > /dev/null 2>&1 && chmod 744 /root/subdomain/subDomainsBrute/subDomainsBrute.py && ln -s /root/subdomain/subDomainsBrute/subDomainsBrute.py /usr/bin/subdomainbrute && pip install dnspython==2.2.1 async_timeout > /dev/null 2>&1
	ea 'subDomainsBrute'
	sleep 2
	
	### dnsmap
	echo -e "${GREEN}  download dnsmap ${END}"
	apt -y  install dnsmap --upgrade > /dev/null 2>&1
	ea 'dnsmap'
	sleep 2

	### ksubdomain
	echo -e "${GREEN}  download ksubdomain ${END}"
	### get version
	num_ksu=`version knownsec ksubdomain`
	cd /root/subdomain && mkdir ksubdomain && cd ksubdomain && proxychains wget https://github.com/knownsec/ksubdomain/releases/download/${num_ksu}/ksubdomain_linux.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip && mv ksubdomain /usr/bin 
	ea 'ksubdomain'
	sleep 2
	
	### aquatone
	echo -e "${GREEN}  download aquatone ${END}"
	gem > /dev/null 2>&1
	if [ $? -ne 0 ];then
		apt -y install ruby > /dev/null 2>&1
		ea 'ruby'
	fi
	gem -y install aquatone > /dev/null 2>&1
	ea 'aquatone'
	sleep 2

	### chaos
	echo -e "${GREEN}  download chaos ${END}"
	###get version
	num_chaos=`version projectdiscovery chaos-client`
	num_chaos_v=`echo $num_chaos | cut -f2 -d "v"`
	cd /root/subdomain && mkdir chaos && cd chaos && proxychains wget https://github.com/projectdiscovery/chaos-client/releases/download/${num_chaos}/chaos-client_${num_chaos_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip LICENSE.md README_CN.md README.md && mv chaos-client /usr/bin/chaos
	ea 'chaos'
	sleep 2

	################################################## dns
	### ldns-walk
	echo -e "${GREEN}  download ldns-walk ${END}"
	apt -y  install ldnsutils --upgrade > /dev/null 2>&1
	ea 'ldns-walk'
	sleep 2

	################################################## permutations

	################################################## altdns
	### altdns
	echo -e "${GREEN}  download altdns ${END}"
	apt -y  install --upgrade altdns > /dev/null 2>&1
	ea 'altdns'
	sleep 2

	### Brute force
}

function otherTools()
{
	### Virtual-host
	### virtual-host-discovery
	echo -e "${GREEN}  download virtual-host-discovery ${END}"
	cd /root/other && proxychains git clone https://github.com/jobertabma/virtual-host-discovery > /dev/null 2>&1
	ea 'virtual-host-discovery'
	sleep 2

	### asnmap
	echo -e "${GREEN}  download Asnmap ${END}"
	### get version
	num_asn=`version projectdiscovery asnmap`
	num_asn_v=`echo $num_asn | cut -f2 -d "v"`
	mkdir /root/other/asnmap && cd /root/other/asnmap && proxychains wget https://github.com/projectdiscovery/asnmap/releases/download/${num_asn}/asnmap_${num_asn_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip LICENSE README.md && mv asnmap /usr/bin
	ea 'asnmap'
	sleep 2

	### mapcidr
	echo -e "${GREEN}  download mapcidr ${END}"
	### get version
	num_cidr=`version projectdiscovery mapcidr`
	num_cidr_v=`echo $num_cidr | cut -f2 -d "v"`
	mkdir /root/other/mapcidr && cd /root/other/mapcidr && proxychains wget https://github.com/projectdiscovery/mapcidr/releases/download/${num_cidr}/mapcidr_${num_cidr_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip LICENSE.MD README.md && mv mapcidr /usr/bin
	ea 'mapcidr'
	sleep 2

	### tlsx
	echo -e "${GREEN}  download tlsx ${END}"
	### get version
	num_tlsx=`version projectdiscovery tlsx`
	num_tlsx_v=`echo $num_tlsx |cut -f2 -d "v"`
	mkdir /root/other/tlsx && cd /root/other/tlsx && proxychains wget https://github.com/projectdiscovery/tlsx/releases/download/${num_tlsx}/tlsx_${num_tlsx_v}_linux_amd64.zip > /dev/null 2>&1 && unzip *.zip > /dev/null 2>&1 && rm *.zip LICENSE README.md && mv tlsx /usr/bin
	ea 'tlsx'
	sleep 2
}

function CycleArray()
{
	for i in ${array[*]}
	do
		echo $i
	done
}

### main 
echo -e "${YELLO}START${END}"
setproxy

echo -e "${YELLO} start MakeNewFolder${END}"
MakeNewFolder

echo -e "${YELLO} start BatchTools${END}"
BatchTools

#echo -e "${YELLO} start CompanyTools${END}"
#CompanyTools

echo -e "${YELLO} start AppTools${END}"
AppTools

echo -e "${YELLO} start SubdomainTools${END}"
SubdomainTools

echo -e "${YELLO} start otherTools${END}"
otherTools

echo -e "${YELLO}END ${END}"


### error
echo -e "${RED}Error ${END}"
CycleArray

### configuration
echo -e "${RED}Configuration ${END}"

echo -e "${GREEN}  OneForAll${END}"
echo -e "${GREEN}  Dnsub${END}"
echo -e "${GREEN}  subfinder${END}"
echo -e "${GREEN}  findomain${END}"
echo -e "${GREEN}  aquatone${END}"
echo -e "${GREEN}  github-subdomains${END}"

### change file
echo -e "${RED}Change file${END}"
echo -e "${GREEN}  Sublist3r${END}"
echo -e "${GREEN}  oneforall.py${END}"